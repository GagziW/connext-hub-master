service: serverless-example

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-sqs-local # local testing guy
  # - serverless-offline-localstack # for localstack

# custom:
#   serverlessOfflineLocalstack:
#     host: http://localhost
#     kinesis:
#       enabled: true
#       intervalMillis: 5000
#     endpoints:
#       S3: http://localhost:4572
#       DynamoDB: http://localhost:4570
#       CloudFormation: http://localhost:4581
#       Elasticsearch: http://localhost:4571
#       ES: http://localhost:4578
#       SNS: http://localhost:4575
#       SQS: http://localhost:4576
#       Lambda: http://localhost:4574
#       Kinesis: http://localhost:4568
#     debug: true


provider:
  name: aws
  runtime: nodejs6.10
  # aws queue
  region: us-east-2
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "sqs:SendMessage"
  #       - "sqs:GetQueueUrl"
  #     Resource: "arn:aws:sqs:${self:provider.region}:626689416502:TestQ"
  #   - Effect: "Allow"
  #     Action:
  #       - "sqs:ListQueues"
  #     Resource: "arn:aws:sqs:${self:provider.region}:TestQ"

package:
  excludeDevDependencies: true
  include:
    - LedgerChannel.json
    - .env

functions:
  # GET FUNCTIONS
  challengeEvent:
    handler: handler.challengeEvent
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - ContractEventQueue
              - Arn
  catchEvents:
    handler: handler.catchEvents
    events:
      - http:
          path: catchEvents
          method: get
          cors: true
  # POST FUNCTIONS
  vcStateUpdate:
    handler: handler.vcStateUpdate
    events:
      - http:
          path: virtualchannel/{vcid}/update
          method: post
          request:
            paths:
              vc: true
  cosignStateUpdate:
    handler: handler.cosignStateUpdate
    events:
      - http: post cosignStateUpdate
  chainsawPoll:
    handler: functions/chainsawPoll/handler.handler
    events:
      - http:
          path: chainsaw/request
          method: post
          cors: true

resources:
  Resources:
    ContractEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ContractEventQueue"
