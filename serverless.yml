service: serverless-example

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-sqs-local # local testing guy
  # - serverless-offline-localstack # for localstack

# custom:
#   serverlessOfflineLocalstack:
#     host: http://localhost
#     kinesis:
#       enabled: true
#       intervalMillis: 5000
#     endpoints:
#       S3: http://localhost:4572
#       DynamoDB: http://localhost:4570
#       CloudFormation: http://localhost:4581
#       Elasticsearch: http://localhost:4571
#       ES: http://localhost:4578
#       SNS: http://localhost:4575
#       SQS: http://localhost:4576
#       Lambda: http://localhost:4574
#       Kinesis: http://localhost:4568
#     debug: true


provider:
  name: aws
  runtime: nodejs6.10
  # aws queue
  region: us-east-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${self:provider.region}:626689416502:TestQ"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:TestQ"

functions:
  # GET FUNCTIONS
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  # check database for transactions and print result
  testget:
    handler: handler.testget
    events:
      - http:
          path: testget
          method: get
          cors: true
  #
  flagEvents:
    handler: handler.flagEvents
    events:
      - http:
          path: flagEvents
          method: get
          cors: true
  disputeWithEvent:
    handler: handler.disputeWithEvent
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - ContractEventQueue
              - Arn
  lambdaOne:
    handler: handler.catchEvents
    events:
      - http:
          path: catchEvents
          method: get
          cors: true
  # POST FUNCTIONS
  vcStateUpdate:
    handler: handler.vcStateUpdate
    events:
      - http:
          path: virtualchannel/{vcid}/update
          method: post
          request:
            paths:
              vc: true
  cosignStateUpdate:
    handler: handler.cosignStateUpdate
    events:
      - http: post cosignStateUpdate
  chainsawPoll:
    handler: functions/chainsawPoll/handler.handler
    events:
      - http:
          path: chainsaw/request
          method: post
          cors: true

  testSendSQS:
    handler: handler.testSendSQS
    events:
      - http: get testSendSQS

  testGetSQS:
    handler: handler.testGetSQS
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - TestQ
              - Arn

resources:
  Resources:
    ContractEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ContractEventQueue"
    TestQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "TestQ"
